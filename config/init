#!/bin/bash
#
# Autor: Walt Byte <walt@gbyte.co>
# Name:  init
# Path:  <project_root_dir>/config/
#

##==============
# config - start

## web server port (leave unchanged for random)
#web_server_port=38881

## change default database settings:
#- root password (default: secret)
#db_root_password=
#- drupal database name (default: drupal)
#db_name=
#- drupal user name (default: drupal)
#db_user=
#- drupal user password (default: drupal)
#db_user_password=

## ToDo:
## drupal release
## distro: https://ftp.drupal.org/files/projects/drupal-x.x.x.tar.gz
## md5sum: https://www.drupal.org/node/3060/release

# config - end
##==============

## services' names
webs=nginx
phps=php
dbss=mysql

## foders/files
html_dir="./html"
scripts_dir="./config"
drupal_inst_script="install_drupal"

# ToDo: Test for dependencies!!!

## Test if ./html directory exists in order to avoid 
## messing up if this is not the first initiation.
if [ -d $html_dir ]; then
    echo "Error! Directory $html_dir exists!"
    echo "    Make sure you don't override an existing project?"
    exit 0
fi

## Apply configuration changes
#- web server port number
if [ ! -z "$web_server_port" ]; then 
    sed -i -r \
        "/ports:/,/volumes:/ s/(^ *- )([0-9]*:)?([0-9]+)/\1$web_server_port:\3/" \
        "./docker-compose.yml"
fi

#- MySql root password
if [ ! -z "$db_root_password" ]; then 
    sed -i -r "s/(^ *MYSQL_ROOT_PASSWORD: +)secret/\1$db_root_password/" \
              "./docker-compose.yml"
fi

#- drupal database name 
if [ ! -z "$db_name" ]; then 
    sed -i -r "s/(^ *MYSQL_DATABASE: +)drupal/\1$db_name/" \
              "./docker-compose.yml"
fi

#- drupal database user name 
if [ ! -z "$db_user" ]; then 
    sed -i -r "s/(^ *MYSQL_USER: +)drupal/\1$db_user/" \
              "./docker-compose.yml"
fi

#- drupal database user password 
if [ ! -z "$db_user_password" ]; then 
    sed -i -r "s/(^ *MYSQL_PASSWORD: +)drupal/\1$db_user_password/" \
              "./docker-compose.yml"
fi

mkdir $html_dir
cp $scripts_dir/$drupal_inst_script $html_dir/

docker-compose up -d

## Check if all the services are running (the containers are up)
#- preserve current terminal width 
stty_width=$(stty -a | grep columns | cut -d' ' -f7 | cut -d';' -f1)
services_status=$(stty columns 120; docker-compose ps | tail -n +3)
#- restore terminal width
stty columns $stty_width

services_count=$(echo "$services_status" | wc -l)
services_up_count=$(echo "$services_status" | grep ' Up ' | wc -l)

if [[ $services_up_count -ne $services_count ]]; then 
    echo
    echo "*** Something went wrong! ***"
    echo
    docker-compose ps
    echo
    echo "Exiting..."
    exit 0
fi

## otherwise, since everything is OK
echo 
echo "All the services seem to be up:"
docker-compose ps

## Find out the name of the php container 
phps_container=$( echo "$services_status" | grep _${phps}_ | cut -d' ' -f1 )

## Run 'install_drupal' script from within the php container. 
echo 
echo "Executing the \'$drupal_inst_script\' script..."
docker exec $phps_container ./$drupal_inst_script
echo "... Done"

## Find out and show the web server port
web_server_port=$(echo "$services_status" \
                      | grep _${webs}_ | cut -d':' -f2 | cut -d'-' -f1 )
echo 
echo "       Web server port: $web_server_port"
echo 
if [ ! -z "$db_name" ]; then 
    echo "         Database name: $db_name"
else
    echo "         Database name: drupal"
fi

if [ ! -z "$db_user" ]; then 
    echo "    Database user name: $db_user"
else
    echo "    Database user name: drupal"
fi

if [ ! -z "$db_user_password" ]; then 
    echo "Database user password: $db_user_password"
else
    echo "Database user password: drupal"
fi
echo 
echo "     MySql server name: $dbss"

## clean up
rm $html_dir/$drupal_inst_script
echo 
exit 0
